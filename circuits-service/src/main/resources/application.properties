spring.application.name=circuits-service

# Server Configuration
server.port=8082

# MySQL Datasource Configuration (Update with actual values)
spring.datasource.url=jdbc:mysql://localhost:3306/circuits_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=circuits_service_user
spring.datasource.password=2003jaime
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Security Configuration for Resource Server
# Option 1: Using JWK Set URI (preferred for asymmetric keys)
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8081/oauth2/jwks
# (users-service would need to expose this endpoint)

# Option 2: Using a shared secret (symmetric key - must match users-service's jwt.secret)
# Ensure this secret is Base64 encoded if users-service's JwtUtils expects that for signing.
# For direct secret usage with Nimbus JWT library (common with Spring Security):
# The value should be the plain secret string, at least 32 bytes (256 bits) long for HS256.
# Spring Boot will automatically create a SecretKeySpec from this.
# spring.security.oauth2.resourceserver.jwt.secret-key=yourSameJwtSecretKeyAsInUsersServiceWhichIsVeryLongAndSecureAndBase64EncodedIfNecessary
# Note: If users-service's JwtUtils uses Base64.getEncoder().encodeToString(secretKey.getEncoded())
# then this secret-key here should be the *original* non-encoded secret if Spring handles encoding,
# OR the Base64 encoded one if JwtDecoder needs it that way. This needs careful alignment.
# For simplicity with spring.security.oauth2.resourceserver.jwt.secret-key, provide the raw secret.
# If users-service's JwtUtils uses Keys.hmacShaKeyFor(Decoders.BASE64.decode(jwtSecret)),
# then provide the Base64 encoded secret here.

# For this example, let's assume users-service uses a Base64 encoded secret for its JwtUtils
# and we provide the SAME Base64 encoded string here.
# The property name `secret-key` might not be standard. `#jws-algorithms` and issuer might be more common.
# Let's use a more standard approach if possible, or clarify how Spring Security derives the key.
# A common way is to provide the JWK Set URI from the auth server.
# If using a shared secret, you might need a custom JwtDecoder bean.

# For now, I will put a placeholder for jwk-set-uri as it's more standard for microservices.
# The users-service would need to be enhanced to provide a JWK endpoint.
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://users-service:8081/.well-known/jwks.json
# For a simpler shared secret approach (less ideal but matches original setup):
# We will need a custom JwtDecoder if just setting a "secret-key" string directly isn't enough.
# The property for secret key is not straightforwardly available for spring.security.oauth2.resourceserver.jwt
# It typically expects an issuer-uri or jwk-set-uri to discover keys.
#
# Given the existing setup likely uses a shared secret string, we will need a custom configuration
# in SecurityConfig.java to define the JwtDecoder bean using this shared secret.
# So, just add the secret to properties for now.
jwt.shared.secret=ZXN0b2VzdW5hcHJ1ZWJhcGFyYWxhY29udHJhc2XDsWFKV1Q= # This is a custom property
